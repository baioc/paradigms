# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _graphs
else:
    import _graphs

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _graphs.delete_SwigPyIterator

    def value(self):
        return _graphs.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _graphs.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _graphs.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _graphs.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _graphs.SwigPyIterator_equal(self, x)

    def copy(self):
        return _graphs.SwigPyIterator_copy(self)

    def next(self):
        return _graphs.SwigPyIterator_next(self)

    def __next__(self):
        return _graphs.SwigPyIterator___next__(self)

    def previous(self):
        return _graphs.SwigPyIterator_previous(self)

    def advance(self, n):
        return _graphs.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _graphs.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _graphs.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _graphs.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _graphs.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _graphs.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _graphs.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _graphs:
_graphs.SwigPyIterator_swigregister(SwigPyIterator)

class Graph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _graphs.Graph_swiginit(self, _graphs.new_Graph(*args))

    def node_number(self):
        return _graphs.Graph_node_number(self)

    def edge_number(self):
        return _graphs.Graph_edge_number(self)

    def insert(self, arg2):
        return _graphs.Graph_insert(self, arg2)

    def erase(self, arg2):
        return _graphs.Graph_erase(self, arg2)

    def link(self, arg2, arg3, arg4=1):
        return _graphs.Graph_link(self, arg2, arg3, arg4)

    def unlink(self, arg2, arg3):
        return _graphs.Graph_unlink(self, arg2, arg3)

    def degree(self, arg2):
        return _graphs.Graph_degree(self, arg2)

    def degree_out(self, arg2):
        return _graphs.Graph_degree_out(self, arg2)

    def degree_in(self, arg2):
        return _graphs.Graph_degree_in(self, arg2)

    def contains(self, *args):
        return _graphs.Graph_contains(self, *args)

    def weight(self, arg2, arg3):
        return _graphs.Graph_weight(self, arg2, arg3)

    def nodes(self):
        return _graphs.Graph_nodes(self)

    def neighbours(self, arg2):
        return _graphs.Graph_neighbours(self, arg2)
    __swig_destroy__ = _graphs.delete_Graph

# Register Graph in _graphs:
_graphs.Graph_swigregister(Graph)

class GraphEdges(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _graphs.GraphEdges_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _graphs.GraphEdges___nonzero__(self)

    def __bool__(self):
        return _graphs.GraphEdges___bool__(self)

    def __len__(self):
        return _graphs.GraphEdges___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _graphs.GraphEdges___getitem__(self, key)

    def __delitem__(self, key):
        return _graphs.GraphEdges___delitem__(self, key)

    def has_key(self, key):
        return _graphs.GraphEdges_has_key(self, key)

    def keys(self):
        return _graphs.GraphEdges_keys(self)

    def values(self):
        return _graphs.GraphEdges_values(self)

    def items(self):
        return _graphs.GraphEdges_items(self)

    def __contains__(self, key):
        return _graphs.GraphEdges___contains__(self, key)

    def key_iterator(self):
        return _graphs.GraphEdges_key_iterator(self)

    def value_iterator(self):
        return _graphs.GraphEdges_value_iterator(self)

    def __setitem__(self, *args):
        return _graphs.GraphEdges___setitem__(self, *args)

    def asdict(self):
        return _graphs.GraphEdges_asdict(self)

    def __init__(self, *args):
        _graphs.GraphEdges_swiginit(self, _graphs.new_GraphEdges(*args))

    def empty(self):
        return _graphs.GraphEdges_empty(self)

    def size(self):
        return _graphs.GraphEdges_size(self)

    def swap(self, v):
        return _graphs.GraphEdges_swap(self, v)

    def begin(self):
        return _graphs.GraphEdges_begin(self)

    def end(self):
        return _graphs.GraphEdges_end(self)

    def clear(self):
        return _graphs.GraphEdges_clear(self)

    def get_allocator(self):
        return _graphs.GraphEdges_get_allocator(self)

    def count(self, x):
        return _graphs.GraphEdges_count(self, x)

    def erase(self, *args):
        return _graphs.GraphEdges_erase(self, *args)

    def find(self, x):
        return _graphs.GraphEdges_find(self, x)
    __swig_destroy__ = _graphs.delete_GraphEdges

# Register GraphEdges in _graphs:
_graphs.GraphEdges_swigregister(GraphEdges)

class GraphNodes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _graphs.GraphNodes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _graphs.GraphNodes___nonzero__(self)

    def __bool__(self):
        return _graphs.GraphNodes___bool__(self)

    def __len__(self):
        return _graphs.GraphNodes___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _graphs.GraphNodes___getitem__(self, key)

    def __delitem__(self, key):
        return _graphs.GraphNodes___delitem__(self, key)

    def has_key(self, key):
        return _graphs.GraphNodes_has_key(self, key)

    def keys(self):
        return _graphs.GraphNodes_keys(self)

    def values(self):
        return _graphs.GraphNodes_values(self)

    def items(self):
        return _graphs.GraphNodes_items(self)

    def __contains__(self, key):
        return _graphs.GraphNodes___contains__(self, key)

    def key_iterator(self):
        return _graphs.GraphNodes_key_iterator(self)

    def value_iterator(self):
        return _graphs.GraphNodes_value_iterator(self)

    def __setitem__(self, *args):
        return _graphs.GraphNodes___setitem__(self, *args)

    def asdict(self):
        return _graphs.GraphNodes_asdict(self)

    def __init__(self, *args):
        _graphs.GraphNodes_swiginit(self, _graphs.new_GraphNodes(*args))

    def empty(self):
        return _graphs.GraphNodes_empty(self)

    def size(self):
        return _graphs.GraphNodes_size(self)

    def swap(self, v):
        return _graphs.GraphNodes_swap(self, v)

    def begin(self):
        return _graphs.GraphNodes_begin(self)

    def end(self):
        return _graphs.GraphNodes_end(self)

    def clear(self):
        return _graphs.GraphNodes_clear(self)

    def get_allocator(self):
        return _graphs.GraphNodes_get_allocator(self)

    def count(self, x):
        return _graphs.GraphNodes_count(self, x)

    def erase(self, *args):
        return _graphs.GraphNodes_erase(self, *args)

    def find(self, x):
        return _graphs.GraphNodes_find(self, x)
    __swig_destroy__ = _graphs.delete_GraphNodes

# Register GraphNodes in _graphs:
_graphs.GraphNodes_swigregister(GraphNodes)

class Digraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _graphs.Digraph_swiginit(self, _graphs.new_Digraph(*args))

    def node_number(self):
        return _graphs.Digraph_node_number(self)

    def edge_number(self):
        return _graphs.Digraph_edge_number(self)

    def insert(self, arg2):
        return _graphs.Digraph_insert(self, arg2)

    def erase(self, arg2):
        return _graphs.Digraph_erase(self, arg2)

    def link(self, arg2, arg3, arg4=1):
        return _graphs.Digraph_link(self, arg2, arg3, arg4)

    def unlink(self, arg2, arg3):
        return _graphs.Digraph_unlink(self, arg2, arg3)

    def degree(self, arg2):
        return _graphs.Digraph_degree(self, arg2)

    def degree_out(self, arg2):
        return _graphs.Digraph_degree_out(self, arg2)

    def degree_in(self, arg2):
        return _graphs.Digraph_degree_in(self, arg2)

    def contains(self, *args):
        return _graphs.Digraph_contains(self, *args)

    def weight(self, arg2, arg3):
        return _graphs.Digraph_weight(self, arg2, arg3)

    def nodes(self):
        return _graphs.Digraph_nodes(self)

    def neighbours(self, arg2):
        return _graphs.Digraph_neighbours(self, arg2)
    __swig_destroy__ = _graphs.delete_Digraph

# Register Digraph in _graphs:
_graphs.Digraph_swigregister(Digraph)



